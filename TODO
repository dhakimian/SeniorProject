 '+' means item is completed


+ Look up how to send C++ class objects in packets so we can send the g_objects vector, which makes up the game-state

Modify build system to eliminate need for two versions of the same code for classes shared by client and server
 + Or maybe use symbolic links?

Milestone 3:
============

 + get the server to communicate game info to (and receive input from) a single client

 + Make client get game-state from server (which constantly sends it), and render based on that.

 + Handle multiple connections
 (+/-) Handle multiple players
    + Distinguish between clients to allow more than one player
        + store connections in a vector
        + Associate the right keyboard input with the right player
          (this should be possible by identifying the player by their host and port)
    - Have server somehow tell client which ship it should be centering on
        (currently, all players center on the first Player object in g_objects, even if that
         isn't the ship they are controlling)
    - remove dead connections from server's list

(Priority) Make game speed not dependent on computer speed.

 + Make client predict motion to make things smoother in case of latency issues
   (If client doesn't get a packet, it updates g_objects locally instead. (changes will of
    course get overridden by next server state) )

Add a way to set a destination for a ship, and have the ship make its way to that point
    (for AI purposes)

 + Handle Player death. Probably the simplest would be to just respawn somewhere random (might have to make sure the area is clear though), or set start points for players

Add a scoring system where you get points for destroying other ships
    - display that score somewhere/somehow (might require adding SDL_TTF to the requirements)

Add a way for client to specify which team they want to join

Add a way for client to specify which port they open
    * right now it is random
    * player identity on the server is a combination of host and port
    * this will allow a player to quit, and then reconnect, and still be controlling the same ship

 + Colorize player graphics based on team, to eliminate need for many differently colored images.
     (req: Make player graphics work well with colorization)

Milestone 4:
============

Try to find a way to prevent objects blinking out temporarily when the full state doesn't come
(the following point will probably help with that)

Only send what's changed to reduce bandwidth usage
    * this may necessitate the use of unique identifiers for objects, so we know which ones
      to update on the client when only a partial list is received

Try make the client experience overall much smoother and less jumpy than it is now

Add simple AI to alien ships: (shouldn't need any server/client interaction)
    * Always go toward nearest ( only :P ) player
        - if not within certain distance of player, thrust towards them (if they are
          within radar range; if not, just pick random destination until they are)
        - once close enough, it would slow down, and... <jump to next point>
    * Shoot when in range (maybe try to make aiming smarter than just where the target
      is at the time: decide where to shoot based on distance and speed of target. Maybe :P )

Signal client to make a sound when it's supposed to (or change how/where sounds are made)
    (right now sounds are made inside update(), which happens on the server, so sounds are only
     made on the client when it is doing local updates)

Decide whether or not to keep the behavior of being able to control the ship when the connection is lost

(client) Display an icon or something whenever doing a local update, to notify player of packet
loss, or just display it once the client considers the connection lost, to let the player know
that their actions aren't being reflected on the server.

Find and prevent/stop memory leaks

Fix weird bug where objects will sometimes be duplicated when I think either the server or
client is killed. Obviously, the bug will need to be tracked down first.
(but it isn't super high priority, it doesn't even happen that often (like 2 or 3 times so far)

Longer term goals
=================

Right now level size is constant and assumed to be the same on server and client. It's not
sent as part of the initial gamestate or anything like that. If the client and server
disagreed on level size right now, weird things would probably happen. Change this.

Distinguish between aesthetic-only explosions and ones that have an effect on the world,
like AOE damage. Make something like explosive debris to use latter; make ship explosions
use latter.

Make aesthetic-only explosions happen client-side
(right now technically I don't even have any aesthetic-only explosions. They basically are
aesthetic, but they are objects just like everything else.)
Revised: Make aesthetic explosions aesthetic.

